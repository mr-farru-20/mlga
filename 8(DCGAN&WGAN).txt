import torch
import torch.nn as nn
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Data Loader (MNIST)
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.5], [0.5])  # scale to [-1, 1]
])

batch_size = 128
dataset = datasets.MNIST(root="./data", train=True, download=True, transform=transform)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

# DCGAN Generator
class DCGAN_Generator(nn.Module):
    def __init__(self, latent_dim=100):
        super().__init__()
        self.model = nn.Sequential(
            nn.ConvTranspose2d(latent_dim, 128, 7, 1, 0, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(True),
            nn.ConvTranspose2d(128, 64, 4, 2, 1, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU(True),
            nn.ConvTranspose2d(64, 1, 4, 2, 1, bias=False),
            nn.Tanh()
        )

    def forward(self, z):
        return self.model(z)

# Show generated images
def show_images(imgs, title="Generated Images"):
    imgs = imgs[:25].detach().cpu()
    grid = torch.cat([img for img in imgs], dim=2).squeeze()
    plt.imshow(grid.numpy(), cmap="gray")
    plt.title(title)
    plt.axis("off")
    plt.show()

# Instantiate and generate samples
latent_dim = 100
dcgan_gen = DCGAN_Generator(latent_dim)
z = torch.randn(25, latent_dim, 1, 1)
dcgan_imgs = dcgan_gen(z)
show_images(dcgan_imgs, "DCGAN Outputs")
